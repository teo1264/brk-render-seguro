#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® ALERT PROCESSOR - Orquestra√ß√£o Principal Sistema BRK + CCB
üìß FUN√á√ÉO: Processar alertas autom√°ticos ap√≥s salvar fatura
üë®‚Äçüíº AUTOR: Sidney Gubitoso, auxiliar tesouraria adm maua
"""

import os
from .ccb_database import obter_responsaveis_por_codigo
from .telegram_sender import enviar_telegram
from .message_formatter import formatar_mensagem_alerta

def processar_alerta_fatura(dados_fatura):
    """
    FUN√á√ÉO PRINCIPAL - Chamada ap√≥s salvar fatura no database_brk.py
    Integra√ß√£o Sistema BRK + CCB Alerta Bot
    """
    try:
        print(f"\nüö® INICIANDO PROCESSAMENTO ALERTA")
        
        # 1. Obter c√≥digo da casa
        codigo_casa = dados_fatura.get('casa_oracao', '')
        
        if not codigo_casa:
            print("‚ö†Ô∏è C√≥digo da casa n√£o encontrado em dados_fatura")
            return False
        
        print(f"üè† Casa detectada: {codigo_casa}")
        
        # 2. Consultar respons√°veis na base CCB
        print(f"üîç Consultando respons√°veis para {codigo_casa}...")
        responsaveis = obter_responsaveis_por_codigo(codigo_casa)
        
        if not responsaveis:
            # Fallback para admin se n√£o encontrar respons√°veis
            print(f"‚ö†Ô∏è Nenhum respons√°vel encontrado para {codigo_casa}")
            print(f"üì± Enviando para admin como fallback...")
            
            admin_ids = os.getenv("ADMIN_IDS", "").split(",")
            if admin_ids and admin_ids[0].strip():
                responsaveis = [{'user_id': admin_ids[0].strip(), 'nome': 'Admin', 'funcao': 'Administrador'}]
            else:
                print(f"‚ùå ADMIN_IDS n√£o configurado - cancelando envio")
                return False
        
        print(f"üë• Respons√°veis encontrados: {len(responsaveis)}")
        
        # 3. Formatar mensagem completa
        print(f"üìù Formatando mensagem...")
        mensagem = formatar_mensagem_alerta(dados_fatura)
        
        if not mensagem or mensagem == "Erro na formata√ß√£o da mensagem":
            print(f"‚ùå Erro na formata√ß√£o da mensagem")
            return False
        
        print(f"‚úÖ Mensagem formatada: {len(mensagem)} caracteres")
        
        # 4. Enviar para cada respons√°vel
        enviados_sucesso = 0
        enviados_erro = 0
        
        for responsavel in responsaveis:
            user_id = responsavel.get('user_id')
            nome = responsavel.get('nome', 'Respons√°vel')
            funcao = responsavel.get('funcao', 'N/A')
            
            if not user_id:
                print(f"‚ö†Ô∏è user_id vazio para {nome}")
                enviados_erro += 1
                continue
            
            print(f"üì± Enviando para: {nome} ({funcao}) - ID: {user_id}")
            
            sucesso = enviar_telegram(user_id, mensagem)
            
            if sucesso:
                enviados_sucesso += 1
                print(f"‚úÖ Enviado para {nome}")
            else:
                enviados_erro += 1
                print(f"‚ùå Falha enviando para {nome}")
        
        # 5. Resultado final
        print(f"\nüìä RESULTADO PROCESSAMENTO ALERTA:")
        print(f"   üè† Casa: {codigo_casa}")
        print(f"   üë• Respons√°veis: {len(responsaveis)}")
        print(f"   ‚úÖ Enviados: {enviados_sucesso}")
        print(f"   ‚ùå Falhas: {enviados_erro}")
        
        return enviados_sucesso > 0
        
    except Exception as e:
        print(f"‚ùå Erro processando alerta: {e}")
        return False
