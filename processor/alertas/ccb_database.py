#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üóÉÔ∏è CCB DATABASE - Acesso Base CCB Alerta Bot via OneDrive
üìß FUN√á√ÉO: Consultar respons√°veis por c√≥digo da casa
üë®‚Äçüíº AUTOR: Sidney Gubitoso, auxiliar tesouraria adm maua
"""

import os
import sqlite3
from utils.onedrive_manager import OneDriveManager
from auth.microsoft_auth import MicrosoftAuth

def obter_responsaveis_por_codigo(codigo_casa):
    """
    Consultar respons√°veis na base CCB por c√≥digo da casa
    Reutiliza MESMO auth do Sistema BRK, apenas pasta diferente
    
    Args:
        codigo_casa (str): C√≥digo da casa (ex: "BR21-0774")
    
    Returns:
        list: Lista de respons√°veis [{'user_id': int, 'nome': str, 'funcao': str}]
    """
    try:
        print(f"üîç Consultando base CCB para: {codigo_casa}")
        
        # 1. Verificar vari√°vel ambiente
        onedrive_alerta_id = os.getenv("ONEDRIVE_ALERTA_ID")
        if not onedrive_alerta_id:
            print(f"‚ùå ONEDRIVE_ALERTA_ID n√£o configurado")
            return []
        
        print(f"üìÅ OneDrive Alerta ID: {onedrive_alerta_id[:20]}...")
        
        # 2. Reutilizar auth Microsoft do Sistema BRK
        auth_manager = MicrosoftAuth()
        if not auth_manager.access_token:
            print(f"‚ùå Auth Microsoft n√£o dispon√≠vel")
            return []
        
        print(f"üîê Auth Microsoft: ‚úÖ Dispon√≠vel")
        
        # 3. Acessar OneDrive pasta /Alerta/ (mesmo auth, pasta diferente)
        onedrive_ccb = OneDriveManager(auth_manager)
        onedrive_ccb.alerta_folder_id = onedrive_alerta_id
        
        print(f"‚òÅÔ∏è Acessando OneDrive pasta /Alerta/...")
        
        # 4. Obter caminho database CCB
        db_path = onedrive_ccb.obter_caminho_database_hibrido()
        
        if not db_path:
            print(f"‚ùå N√£o foi poss√≠vel obter caminho database CCB")
            return []
        
        print(f"üíæ Database CCB: {os.path.basename(db_path)}")
        
        # 5. Conectar e consultar respons√°veis
        conn = sqlite3.connect(db_path)
        
        responsaveis = conn.execute("""
            SELECT user_id, nome, funcao 
            FROM responsaveis 
            WHERE codigo_casa = ?
        """, (codigo_casa,)).fetchall()
        
        conn.close()
        
        # 6. Formatar resultado
        resultado = []
        for user_id, nome, funcao in responsaveis:
            resultado.append({
                'user_id': user_id,
                'nome': nome or 'Nome n√£o informado',
                'funcao': funcao or 'Fun√ß√£o n√£o informada'
            })
        
        print(f"‚úÖ Respons√°veis encontrados: {len(resultado)}")
        for resp in resultado:
            print(f"   üë§ {resp['nome']} ({resp['funcao']}) - ID: {resp['user_id']}")
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Erro consultando base CCB: {e}")
        return []

def testar_conexao_ccb():
    """
    Fun√ß√£o de teste para verificar conex√£o com base CCB
    √ötil para debug e valida√ß√£o
    """
    try:
        print(f"\nüß™ TESTE CONEX√ÉO BASE CCB")
        print(f"="*40)
        
        # Verifica√ß√µes b√°sicas
        onedrive_alerta_id = os.getenv("ONEDRIVE_ALERTA_ID")
        print(f"üìÅ ONEDRIVE_ALERTA_ID: {'‚úÖ Configurado' if onedrive_alerta_id else '‚ùå N√£o configurado'}")
        
        if not onedrive_alerta_id:
            return False
        
        auth_manager = MicrosoftAuth()
        print(f"üîê Auth Microsoft: {'‚úÖ Dispon√≠vel' if auth_manager.access_token else '‚ùå N√£o dispon√≠vel'}")
        
        if not auth_manager.access_token:
            return False
        
        # Testar acesso OneDrive
        onedrive_ccb = OneDriveManager(auth_manager)
        onedrive_ccb.alerta_folder_id = onedrive_alerta_id
        
        db_path = onedrive_ccb.obter_caminho_database_hibrido()
        print(f"üíæ Database path: {'‚úÖ Obtido' if db_path else '‚ùå Falhou'}")
        
        if not db_path:
            return False
        
        # Testar query b√°sica
        conn = sqlite3.connect(db_path)
        
        # Contar total de respons√°veis
        total_responsaveis = conn.execute("SELECT COUNT(*) FROM responsaveis").fetchone()[0]
        print(f"üë• Total respons√°veis: {total_responsaveis}")
        
        # Listar casas distintas
        casas = conn.execute("SELECT DISTINCT codigo_casa FROM responsaveis ORDER BY codigo_casa").fetchall()
        print(f"üè† Casas cadastradas: {len(casas)}")
        for (casa,) in casas[:5]:  # Mostrar apenas 5 primeiras
            print(f"   üè™ {casa}")
        if len(casas) > 5:
            print(f"   ... e mais {len(casas)-5} casas")
        
        conn.close()
        
        print(f"‚úÖ Teste conex√£o CCB: SUCESSO")
        return True
        
    except Exception as e:
        print(f"‚ùå Teste conex√£o CCB: FALHOU - {e}")
        return False
