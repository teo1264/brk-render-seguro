# 🚀 BRK Monitor - Configuração Render Deploy (MODULAR)
# 
# Configuração atualizada para estrutura modular:
# auth/ + processor/ + admin/ + app.py

services:
  - type: web
    name: brk-monitor
    env: python
    plan: free
    
    # 📦 Build Configuration
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    
    # 🌐 Network Configuration  
    healthCheckPath: /health
    
    # 📁 Persistent Storage (CRÍTICO para SQLite + tokens)
    disk:
      name: brk-storage
      mountPath: /opt/render/project/storage
      sizeGB: 1
    
    # 🔒 Environment Variables (Configure no Dashboard)
    envVars:
      - key: MICROSOFT_CLIENT_ID
        sync: false  # Configurar manualmente no Dashboard
      
      - key: PASTA_BRK_ID  
        sync: false  # Configurar manualmente no Dashboard
        
      - key: MICROSOFT_TENANT_ID
        value: consumers  # Valor padrão
        
      - key: PORT
        value: 8080  # Render define automaticamente
        
      - key: EXECUTAR_ADMIN_SERVER
        value: true  # 🆕 Servidor admin habilitado por padrão
        
    # 🔄 Auto Deploy
    autoDeploy: true
    
    # 📋 Configurações Adicionais
    region: oregon  # Região padrão (pode alterar)
    
    # 🛡️ Health Check
    healthCheckPath: /health
    healthCheckGracePeriod: 30s

# 📝 Instruções Atualizadas:
#
# 1. ESTRUTURA MODULAR SUPORTADA:
#    - auth/microsoft_auth.py → Autenticação Microsoft
#    - processor/email_processor.py → Processamento emails
#    - admin/admin_server.py → Interface administrativa
#    - app.py → Orquestração principal
#
# 2. VARIÁVEIS OBRIGATÓRIAS:
#    - MICROSOFT_CLIENT_ID = seu_client_id
#    - PASTA_BRK_ID = seu_pasta_id
#    - EXECUTAR_ADMIN_SERVER = true (servidor web incluído)
#
# 3. ENDPOINTS DISPONÍVEIS:
#    - / → Interface administrativa
#    - /upload-token → Upload seguro de token
#    - /health → Health check JSON
#    - /status → Status detalhado sistema
#    - /test-onedrive → Teste conectividade OneDrive
#    - /create-brk-folder → Criar pasta /BRK
#
# 4. FUNCIONAMENTO:
#    - app.py → Processamento automático (10min) + Servidor admin
#    - Persistent disk → tokens + SQLite + PDFs simulados
#    - Logs → Estrutura modular visível
#
# 5. DEPLOY PROCESS:
#    - GitHub push → Auto deploy
#    - Build → pip install requirements.txt
#    - Start → python app.py (híbrido: processamento + web)
#    - Health → /health endpoint ativo

# ⚡ PERFORMANCE OTIMIZADA:
# - Módulos separados = imports mais rápidos
# - Classes especializadas = menos overhead
# - Processamento isolado = melhor debugging
# - Interface separada = manutenção simplificada

# 🔮 PREPARADO PARA CRESCIMENTO:
# - admin/ pronto para dashboard avançado
# - processor/ pronto para OCR real
# - auth/ pronto para OneDrive real
# - app.py mantém coordenação simples
